<?php

namespace Greg\ReaderBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;


/**
 * FeedRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemRepository extends EntityRepository
{
    
    
    function getLastItem($channel)
    {
        if (!$channel)
        {
            throw  new \InvalidArgumentException("channel manquant.");
        }
        $query = $this->createQueryBuilder('i')
                    ->where('i.channel = :channel')
                    ->setParameter('channel', $channel)
                    ->orderBy('i.pubDate', 'desc')
                    ->setMaxResults(1);
        return $query->getQuery()->getOneOrNullResult();
    }
    
    function getItems(Channel $channel, $nbParPage, $page)
    {
        if ($page < 1) {
            throw new \InvalidArgumentException(
                    "L'argument \$page ne peut être inférieur à 1 
                    (valeur : $page)");
        }
                
        $query = $this->createQueryBuilder('i')
                ->leftJoin('i.channel', 'c')
                ->addSelect('c')
                ->where('c.id = :channel')
                ->orderBy('i.pubDate', 'DESC')
                ->setParameter('channel', $channel);
        $query->setFirstResult(($page - 1) * $nbParPage)
                ->setMaxResults($nbParPage);
        
        return new Paginator($query);
        
    }
    
    function getAllItems($nbParPage, $page) {
        if ($page < 1) {
            throw new \InvalidArgumentException(
                    "L'argument \$page ne peut être inférieur à 1
                        (valeur: $page)");
        }
        
        $query = $this->createQueryBuilder('i')
                        ->leftJoin('i.channel', 'c')
                        ->addSelect('c')
                        ->orderBy('i.pubDate', 'DESC')
                        ->setFirstResult(($page - 1) * $nbParPage)
                        ->setMaxResults($nbParPage);
        return new Paginator($query);
    }
    
    function getUnreadItems(Channel $channel) {
        $qb = $this->createQueryBuilder('i');
        
        $query = $qb
                    ->where('i.channel = :channel')
                    ->setParameter('channel', $channel)
                    ->andwhere( $qb->expr()->isNull('i.readDate') )
                    ->getQuery();
        return $query->getResult();        
    }
}
